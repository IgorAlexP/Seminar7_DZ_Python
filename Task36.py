""" 
Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), которая принимает
в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца.
Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). Примечание: бинарной операцией 
называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.

Ввод:

print_operation_table(lambda x, y: x * y)

Вывод:

1 2 3 4 5 6
2 4 6 8 10 12
3 6 9 12 15 18
4 8 12 16 20 24
5 10 15 20 25 30
6 12 18 24 30 36
"""

def print_operation_table(operation, num_rows=6, num_columns=6):
    for i in range(1, num_rows+1):
        row = ""
        for j in range(1, num_columns+1):
            row += str(operation(i, j)) + " "
        print(row)

print_operation_table(lambda x, y: x * y)


""" 
Сначала определяем функцию print_operation_table(operation, num_rows=6, num_columns=6), 
которая принимает в качестве аргумента функцию operation, вычисляющую элемент по номеру строки и столбца, 
а также необязательные аргументы num_rows и num_columns, указывающие число строк и столбцов таблицы.

Затем используем два вложенных цикла для прохода по строкам и столбцам таблицы. 
Внутренний цикл заполняет строку row значениями элементов в соответствии с заданной операцией, 
разделяя их пробелами. После завершения внутреннего цикла строка row выводится на экран с помощью 
функции print().

В данном случае используем лямбда-функцию lambda x, y: x * y для вычисления произведения номеров строки
и столбца, то есть для создания таблицы умножения. Вызываем функцию print_operation_table() с этой функцией 
в качестве аргумента.
"""